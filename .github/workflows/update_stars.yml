name: Update GitHub Stars

# 工作流触发条件
on:
  # 定时执行：每天UTC时间3点（北京时间11点）
  schedule:
    - cron: '0 3 * * *'
  
  # 手动触发
  workflow_dispatch:
    inputs:
      fetch_mode:
        description: '获取模式 (incremental: 增量更新, full: 全量更新)'
        required: true
        default: 'incremental'
        type: choice
        options:
          - incremental
          - full
      skip_classification:
        description: '跳过AI分类步骤'
        required: false
        default: false
        type: boolean

# 环境变量
env:
  PYTHON_VERSION: '3.11'
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  # GitHub相关环境变量
  GH_PAT: ${{ secrets.GH_PAT }}
  GITHUB_USERNAME: ${{ github.actor }}
  # AI相关环境变量（仅在需要时使用）
  AI_API_KEY: ${{ secrets.AI_API_KEY }}
  AI_ACCOUNT_ID: ${{ secrets.AI_ACCOUNT_ID }}

# 作业定义
jobs:
  update-stars:
    name: 更新GitHub Star项目
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    # 并发控制
    concurrency:
      group: update-stars-${{ github.ref }}
      cancel-in-progress: false
    
    # 权限设置
    permissions:
      contents: write
      actions: read
    
    steps:
      # 1. 检出代码
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
          persist-credentials: true
      
      # 2. 设置Python环境
      - name: 🐍 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      # 3. 安装依赖
      - name: 📦 安装Python依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -c "import requests, yaml; print('✅ 核心依赖验证通过')"
      
      # 4. 验证环境配置
      - name: 🔍 验证环境配置
        run: |
          python src/env_check.py --secrets-only ${{ github.event.inputs.skip_classification == 'true' && '--skip-classification' || '' }}
      
      # 5. 创建必要的目录
      - name: 📁 创建目录结构
        run: |
          python src/workflow_utils.py create-dirs
      
      # 6. 设置运行时环境变量
      - name: ⚙️ 配置运行环境
        run: |
          # 确定获取模式
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "FETCH_MODE=incremental" >> $GITHUB_ENV
            echo "⏰ 定时任务 - 增量更新模式"
          elif [ -n "${{ github.event.inputs.fetch_mode }}" ]; then
            echo "FETCH_MODE=${{ github.event.inputs.fetch_mode }}" >> $GITHUB_ENV
            echo "👤 手动触发 - ${{ github.event.inputs.fetch_mode }}模式"
          else
            echo "FETCH_MODE=incremental" >> $GITHUB_ENV
            echo "📝 默认 - 增量更新模式"
          fi
          
          echo "✅ 环境变量配置完成"
      
      # 7. 获取Star项目数据
      - name: ⭐ 获取GitHub Star项目
        timeout-minutes: 30
        run: |
          echo "🚀 开始获取GitHub Star项目..."
          echo "📋 获取模式: $FETCH_MODE"
          
          if python src/fetch_stars.py; then
            echo "✅ Star项目获取成功"
            python src/stats.py project_stats
          else
            echo "❌ Star项目获取失败"
            exit 1
          fi
      
      # 8. AI分类处理
      - name: 🤖 AI智能分类
        if: github.event.inputs.skip_classification != 'true'
        timeout-minutes: 30
        run: |
          echo "🧠 开始AI智能分类..."
          
          if [ -f "data/stars_data.json" ]; then
            unclassified_count=$(python src/stats.py unclassified)
            
            if [ "$unclassified_count" -eq "0" ]; then
              echo "📝 所有项目已分类，跳过AI分类步骤"
            else
              echo "📊 发现 $unclassified_count 个未分类项目，开始AI分类..."
              
              if python src/classify.py data/stars_data.json; then
                echo "✅ AI分类完成"
                python src/stats.py classification
              else
                echo "❌ AI分类失败"
                exit 1
              fi
            fi
          else
            echo "❌ 数据文件不存在，跳过AI分类"
          fi
      
      # 9. 生成分类文档
      - name: 📝 生成分类文档
        run: |
          echo "📚 开始生成分类文档..."
          python src/generate_category_docs.py
          echo "✅ 分类文档生成完成"
      
      # 10. 更新README
      - name: 📖 更新README文件
        run: |
          echo "📝 开始更新README..."
          python src/update_readme.py
          echo "✅ README更新完成"
      
      # 11. 检查文件变更
      - name: 🔍 检查文件变更
        id: check_changes
        run: |
          python src/workflow_utils.py check-changes
      
      # 12. 提交并推送变更
      - name: 💾 提交并推送变更
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          python src/workflow_utils.py commit-changes "$FETCH_MODE" "${{ github.event_name }}" "${{ github.run_number }}" "${{ github.event.inputs.skip_classification }}"
          python src/workflow_utils.py push-changes
      
      # 13. 生成执行摘要
      - name: 📊 生成执行摘要
        if: always()
        run: |
          python src/workflow_utils.py summary "${{ github.event.created_at }}" "$FETCH_MODE" "${{ github.event_name }}" "${{ github.run_number }}" "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" "${{ github.event.inputs.skip_classification }}" "${{ steps.check_changes.outputs.has_changes }}"