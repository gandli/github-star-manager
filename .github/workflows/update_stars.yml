name: Update GitHub Stars

# 工作流触发条件
on:
  # 定时执行：每天UTC时间3点（北京时间11点）
  schedule:
    - cron: '0 3 * * *'
  
  # 手动触发
  workflow_dispatch:
    inputs:
      fetch_mode:
        description: '获取模式 (incremental: 增量更新, full: 全量更新)'
        required: true
        default: 'incremental'
        type: choice
        options:
          - incremental
          - full
      force_full_fetch:
        description: '强制全量获取（忽略fetch_mode设置）'
        required: false
        default: false
        type: boolean
      max_repositories:
        description: '最大获取仓库数量（可选，留空使用配置文件默认值）'
        required: false
        type: string
      skip_classification:
        description: '跳过AI分类步骤'
        required: false
        default: false
        type: boolean

# 环境变量
env:
  PYTHON_VERSION: '3.11'  # 升级到更新的Python版本以获得更好的性能
  REQUIREMENTS_FILE: 'requirements.txt'
  PIP_CACHE_DIR: ~/.cache/pip  # 设置pip缓存目录

# 作业定义
jobs:
  update-stars:
    name: 更新GitHub Star项目
    runs-on: ubuntu-latest
    
    # 超时设置（防止工作流无限运行）
    timeout-minutes: 60
    
    # 并发控制（确保同一时间只有一个实例运行）
    concurrency:
      group: update-stars-${{ github.ref }}
      cancel-in-progress: false
    
    # 权限设置
    permissions:
      contents: write
      actions: read
    
    steps:
      # 1. 检出代码
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1  # 浅克隆以提高性能，除非需要完整历史记录
          persist-credentials: true
      
      # 2. 设置Python环境
      - name: 🐍 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ${{ env.REQUIREMENTS_FILE }}
      
      # 3. 安装依赖
      - name: 📦 安装Python依赖
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f ${{ env.REQUIREMENTS_FILE }} ]; then
            pip install -r ${{ env.REQUIREMENTS_FILE }} --no-warn-script-location
          else
            echo "⚠️ requirements.txt not found, installing basic dependencies"
            pip install requests PyYAML --no-warn-script-location
          fi
          
          # 验证关键依赖是否安装成功
          python -c "import requests, yaml; print('✅ 核心依赖验证通过')"
      
      # 4. 验证环境变量
      - name: 🔍 验证环境配置
        run: |
          python src/env_check.py --secrets-only ${{ github.event.inputs.skip_classification == 'true' && '--skip-classification' || '' }}
      
      # 5. 健康检查
      - name: 🏥 系统健康检查
        run: |
          python src/env_check.py --health-check ${{ github.event.inputs.skip_classification == 'true' && '--skip-classification' || '' }}
      
      # 6. 创建必要的目录
      - name: 📁 创建目录结构
        run: |
          python src/workflow_utils.py create-dirs
      
      # 7. 设置运行时环境变量
      - name: ⚙️ 配置运行环境
        run: |
          # 确定获取模式
          if [ "${{ github.event.inputs.force_full_fetch }}" = "true" ]; then
            echo "FETCH_MODE=full" >> $GITHUB_ENV
            echo "🔄 强制全量获取模式"
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "FETCH_MODE=incremental" >> $GITHUB_ENV
            echo "⏰ 定时任务 - 增量更新模式"
          elif [ -n "${{ github.event.inputs.fetch_mode }}" ]; then
            echo "FETCH_MODE=${{ github.event.inputs.fetch_mode }}" >> $GITHUB_ENV
            echo "👤 手动触发 - ${{ github.event.inputs.fetch_mode }}模式"
          else
            echo "FETCH_MODE=incremental" >> $GITHUB_ENV
            echo "📝 默认 - 增量更新模式"
          fi
          
          # 设置最大仓库数量
          if [ -n "${{ github.event.inputs.max_repositories }}" ]; then
            echo "MAX_REPOSITORIES=${{ github.event.inputs.max_repositories }}" >> $GITHUB_ENV
            echo "📊 自定义最大仓库数量: ${{ github.event.inputs.max_repositories }}"
          fi
          
          # 设置其他环境变量（使用掩码保护敏感信息）
          echo "GH_PAT=${{ secrets.GH_PAT }}" >> $GITHUB_ENV
          echo "GITHUB_USERNAME=${{ github.actor }}" >> $GITHUB_ENV
          
          # 只在需要时设置AI相关环境变量
          if [ "${{ github.event.inputs.skip_classification }}" != "true" ]; then
            echo "AI_API_KEY=${{ secrets.AI_API_KEY }}" >> $GITHUB_ENV
            echo "AI_ACCOUNT_ID=${{ secrets.AI_ACCOUNT_ID }}" >> $GITHUB_ENV
          fi
          
          # 设置安全相关环境变量
          echo "PYTHONUNBUFFERED=1" >> $GITHUB_ENV  # 确保Python输出不被缓冲
          echo "PYTHONDONTWRITEBYTECODE=1" >> $GITHUB_ENV  # 不生成.pyc文件
          
          echo "✅ 环境变量配置完成"
      
      # 8. 获取Star项目数据
      - name: ⭐ 获取GitHub Star项目
        timeout-minutes: 30
        run: |
          echo "🚀 开始获取GitHub Star项目..."
          echo "📋 获取模式: $FETCH_MODE"
          
          # 添加重试机制
          retry_count=0
          max_retries=3
          
          while [ $retry_count -lt $max_retries ]; do
            if python src/fetch_stars.py; then
              echo "✅ Star项目获取成功"
              
              # 显示获取统计
              python src/stats.py project_stats
              break
            else
              retry_count=$((retry_count + 1))
              if [ $retry_count -lt $max_retries ]; then
                echo "⚠️ 获取失败，等待30秒后重试 ($retry_count/$max_retries)..."
                sleep 30
              else
                echo "❌ Star项目获取失败，已达到最大重试次数"
                exit 1
              fi
            fi
          done
      
      # 9. AI分类处理
      - name: 🤖 AI智能分类
        if: github.event.inputs.skip_classification != 'true'
        timeout-minutes: 45
        run: |
          echo "🧠 开始AI智能分类..."
          
          # 检查是否有需要分类的项目
          if [ -f "data/stars_data.json" ]; then
            unclassified_count=$(python src/stats.py unclassified)
            
            if [ "$unclassified_count" -eq "0" ]; then
              echo "📝 所有项目已分类，跳过AI分类步骤"
            else
              echo "📊 发现 $unclassified_count 个未分类项目，开始AI分类..."
              
              # 添加重试机制
              retry_count=0
              max_retries=2
              
              while [ $retry_count -lt $max_retries ]; do
                if python src/classify.py; then
                  echo "✅ AI分类完成"
                  
                  # 显示分类统计
                  python src/stats.py classification
                  break
                else
                  retry_count=$((retry_count + 1))
                  if [ $retry_count -lt $max_retries ]; then
                    echo "⚠️ AI分类失败，等待60秒后重试 ($retry_count/$max_retries)..."
                    sleep 60
                  else
                    echo "❌ AI分类失败，已达到最大重试次数"
                    exit 1
                  fi
                fi
              done
            fi
          else
            echo "❌ 数据文件不存在，跳过AI分类"
          fi
      
      # 10. 生成分类文档
      - name: 📝 生成分类文档
        run: |
          echo "📚 开始生成分类文档..."
          
          python src/generate_category_docs.py
          
          if [ $? -eq 0 ]; then
            echo "✅ 分类文档生成成功"
            
            # 显示生成的文档
            if [ -d "docs" ]; then
              doc_count=$(find docs -name "*.md" -type f | wc -l)
              echo "📄 生成文档数量: $doc_count"
              echo "📋 生成的文档:"
              find docs -name "*.md" -type f -exec basename {} \; | sort
            fi
          else
            echo "❌ 分类文档生成失败"
            exit 1
          fi
      
      # 11. 更新README
      - name: 📖 更新README文件
        run: |
          echo "📝 开始更新README..."
          
          python src/update_readme.py
          
          if [ $? -eq 0 ]; then
            echo "✅ README更新成功"
          else
            echo "❌ README更新失败"
            exit 1
          fi
      
      # 12. 检查文件变更
      - name: 🔍 检查文件变更
        id: check_changes
        run: |
          echo "🔍 检查文件变更..."
          python src/workflow_utils.py check-changes
      
      # 13. 提交变更
      - name: 💾 提交变更
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "💾 提交文件变更..."
          python src/workflow_utils.py commit-changes "$FETCH_MODE" "${{ github.event_name }}" "${{ github.run_number }}" "${{ github.event.inputs.skip_classification }}"
      
      # 14. 推送变更
      - name: 🚀 推送变更
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "🚀 推送变更到远程仓库..."
          python src/workflow_utils.py push-changes
      
      # 15. 生成执行摘要
      - name: 📊 生成执行摘要
        if: always()
        run: |
          echo "📊 生成执行摘要..."
          python src/workflow_utils.py summary "${{ github.event.created_at }}" "$FETCH_MODE" "${{ github.event_name }}" "${{ github.run_number }}" "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" "${{ github.event.inputs.skip_classification }}" "${{ steps.check_changes.outputs.has_changes }}"
      
      # 16. 错误处理和清理
      - name: 🧹 清理和错误处理
        if: failure()
        run: |
          echo "❌ 工作流执行失败，开始诊断和清理..."
          
          # 显示失败的步骤信息
          echo "🔍 失败诊断:"
          echo "  - 失败时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "  - 运行编号: ${{ github.run_number }}"
          echo "  - 触发方式: ${{ github.event_name }}"
          
          # 显示错误日志
          if [ -d "logs" ]; then
            echo "📋 应用错误日志:"
            find logs -name "*.log" -type f -exec echo "=== {} ===" \; -exec head -50 {} \;
          else
            echo "📋 没有找到应用日志目录"
          fi
          
          # 检查数据文件状态
          echo "📊 数据文件状态:"
          if [ -f "data/stars_data.json" ]; then
            echo "  - stars_data.json: 存在 ($(stat -c%s data/stars_data.json 2>/dev/null || stat -f%z data/stars_data.json) bytes)"
          else
            echo "  - stars_data.json: 不存在"
          fi
          
          # 检查网络连接
          echo "🌐 网络连接测试:"
          if curl -s --max-time 10 https://api.github.com > /dev/null; then
            echo "  - GitHub API: ✅ 可访问"
          else
            echo "  - GitHub API: ❌ 无法访问"
          fi
          
          # 显示Python环境信息
          echo "🐍 Python环境信息:"
          python --version
          echo "  - 已安装包:"
          pip list | head -20
          
          # 显示系统资源信息
          echo "💻 系统资源信息:"
          echo "  - 系统: $(uname -s) $(uname -r)"
          echo "  - 磁盘空间: $(df -h . | tail -1 | awk '{print $4}') 可用"
          echo "  - 内存: $(free -h | grep '^Mem:' | awk '{print $7}') 可用"
          
          # 清理临时文件
          echo "🧹 清理临时文件..."
          find . -name "*.tmp" -type f -delete 2>/dev/null || true
          find . -name "*.pyc" -type f -delete 2>/dev/null || true
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          
          echo "🧹 清理完成"